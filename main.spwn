extract obj_props

TEXT_ID = 914
BLACK_BLOCK_ID = 94
DEFAULT_BLOCK_ID = 1
H_BLOCK_ID = 1859
COLLISION_BLOCK_ID = 1816
SPIKE_BLOCK_ID = 8

N = 5 // Number of variables
// M = 10 // Number of expressions (is variable)

SPIKE_WALL_BLOCKS = 5 // height of spike wall at the end

// util funcs

// converts # blocks to coords
blocks = (n_blocks) {
    return n_blocks * 30  // size per block
}
move_blocks = (n_blocks) {
    return n_blocks * 10  // I hate move triggers
}

// same as blocks(...) but anchors to bottom left corner
lcorner = (n_blocks) {
    return blocks(n_blocks + 0.5)
}

// current pos
let cur_xpos = lcorner(3)

// initial text object
$.add(obj {
    OBJ_ID: TEXT_ID,
    X: cur_xpos,
    Y: lcorner(3.5),
    TEXT: $.b64encode("flag{")
})

// now we place variable indicators:
cur_xpos += blocks(3)

$.print(lcorner(1.05))

let var_groups = []
for i in 0..N {
    group = ?g

    // text objects
    $.add(obj {
        OBJ_ID: TEXT_ID,
        X: cur_xpos,
        Y: lcorner(4),
        TEXT: $.b64encode("0")
    })

    $.add(obj {
        OBJ_ID: TEXT_ID,
        X: cur_xpos,
        Y: lcorner(3),
        TEXT: $.b64encode("1")
    })

    // obscuring block
    $.add(obj {
        OBJ_ID: BLACK_BLOCK_ID,
        X: cur_xpos,
        Y: lcorner(3),
        GROUPS: group
    })

    // block to hit and triggers
    $.add(obj {
        OBJ_ID: DEFAULT_BLOCK_ID,
        X: cur_xpos,
        Y: lcorner(1.05)
    })

    $.add(obj {
        OBJ_ID: H_BLOCK_ID,
        X: cur_xpos,
        Y: lcorner(1.05)
    })

    $.add(move_trigger(group, 0, move_blocks(1)).with(X, cur_xpos).with(Y, lcorner(1.05)).with(TOUCH_TRIGGERED, true))

    // go to next group
    cur_xpos += blocks(2)
    var_groups.push(group)
}

// set up expression machine
expr_count_id = ?i // correct expression counter
expr_count_group = ?g // group manages that machinery to increment expr_count_id 
sweep_group = ?g // group of objects that sweeps to the right with the player
coll_ids = {
    // IDs for the blocks that 
    correct1: ?b,
    correct2: ?b,

    var_isset: ?b, // for the blocks that check if a variable is set
    var: ?b // for the variables themselves
}

// set up events
on(collision(coll_ids.correct1, coll_ids.correct2), !{
    expr_count_id.add(1)
})

on(collision(coll_ids.var, coll_ids.var_isset), !{
    expr_count_group.move(0, move_blocks(-1), 0.1)
    expr_count_group.move(0, move_blocks(1), 0.1)
})

// set up follow trigger
cur_xpos += blocks(3)
$.add(lock_to_player_trigger(sweep_group).with(X, cur_xpos).with(Y, lcorner(-1)))

// set up incrementer collision blocks
$.add(obj {
    OBJ_ID: COLLISION_BLOCK_ID,
    X: cur_xpos,
    Y: lcorner(1),
    GROUPS: [expr_count_group, sweep_group],
    BLOCK_A: coll_ids.correct1, // collision block ID
    DYNAMIC_BLOCK: true
})

$.add(obj {
    OBJ_ID: COLLISION_BLOCK_ID,
    X: cur_xpos,
    Y: lcorner(0),
    GROUPS: [sweep_group],
    SCALE: 0.5,
    BLOCK_A: coll_ids.correct2, // collision block ID
    DYNAMIC_BLOCK: false
})

// set up collision variable blocks
let var_ypos = []
let cur_ypos = lcorner(3)
for i in 0..N {
    $.add(obj {
        OBJ_ID: COLLISION_BLOCK_ID,
        X: cur_xpos,
        Y: cur_ypos,
        GROUPS: [var_groups[i], sweep_group],
        BLOCK_A: coll_ids.var, // collision block ID
        DYNAMIC_BLOCK: true
    })

    var_ypos.push(cur_ypos)
    cur_ypos += blocks(2)
}

// read and parse expressions
let M = 0
let exprs = []

// add expression
cur_xpos += blocks(3)

// spike wall and toggling
cur_xpos += blocks(3)

spike_wall_group = ?g

expr_count_id.if_is(EQUAL_TO, M, !{
    spike_wall_group.toggle_off()
})

for i in 0..SPIKE_WALL_BLOCKS {
    $.add(obj {
        OBJ_ID: SPIKE_BLOCK_ID,
        X: cur_xpos,
        Y: lcorner(i),
        GROUPS: spike_wall_group
    })
}